#!/bin/bash

# üöÄ LangExtract Provider Testing Script
# This script helps you easily test different language model providers

set -e

echo "üöÄ LangExtract End-to-End Provider Testing"
echo "=========================================="

# Check if any providers are configured
PROVIDERS_FOUND=false

# Check OpenAI
if [ ! -z "$OPENAI_API_KEY" ]; then
    echo "‚úÖ OpenAI API key found"
    PROVIDERS_FOUND=true
else
    echo "‚ö†Ô∏è  OpenAI API key not found (set OPENAI_API_KEY)"
fi

# Check Ollama
if command -v ollama &> /dev/null; then
    if curl -s http://localhost:11434/api/tags &> /dev/null; then
        echo "‚úÖ Ollama server is running"
        PROVIDERS_FOUND=true
    else
        echo "‚ö†Ô∏è  Ollama server not running (run 'ollama serve')"
    fi
else
    echo "‚ö†Ô∏è  Ollama not installed"
fi

# Check for custom provider
if [ ! -z "$CUSTOM_LLM_URL" ] && [ ! -z "$CUSTOM_LLM_KEY" ]; then
    echo "‚úÖ Custom provider configured"
    PROVIDERS_FOUND=true
fi

if [ "$PROVIDERS_FOUND" = false ]; then
    echo ""
    echo "‚ùå No providers found! Please configure at least one:"
    echo "   ‚Ä¢ OpenAI: export OPENAI_API_KEY=your_key"
    echo "   ‚Ä¢ Ollama: ollama serve && ollama pull mistral"
    echo "   ‚Ä¢ Custom: export CUSTOM_LLM_URL=... && export CUSTOM_LLM_KEY=..."
    echo ""
    echo "üìñ See E2E_TEST_README.md for detailed setup instructions"
    exit 1
fi

echo ""
echo "üîß Building and running end-to-end test..."
echo ""

# Run the test
cargo run --example e2e_provider_test

echo ""
echo "üéâ Test completed!"
echo ""
echo "üìÅ Check the current directory for generated files:"
echo "   ‚Ä¢ *.html - Interactive visualization"
echo "   ‚Ä¢ *.json - Structured data"
echo "   ‚Ä¢ *.csv  - Spreadsheet format"
echo ""
echo "üìñ Open the .html files in your browser to see rich interactive results!"
